<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.aka.app.edms.EdmsDAO">

	
<!-- 	<insert id="createEdms" parameterType="EdmsVO">
	
		INSERT INTO EDMS (EDMS_NO, EDMS_FORM_NO, EDMS_CREATOR, EDMS_TITLE, EDMS_CONTENT, EDMS_STATUS, EDMS_APPROVAL_DATE, EDMS_CREATE_DATE, EDMS_EXP_DATE, EDMS_USE, EDMS_EXTRA_DATE1, EDMS_EXTRA_DATE2, EDMS_EXTRA_COINTENTS, EDMS_EXTRA_NUMBER, EDMS_CREATOR_POSITION)
					VALUES(NEXTVAL(EDMS_SEQ), edmsFromNo, edmsCreator, edmsTitle, ,edmsContent, edmsStatus, edmsApplovalDate, edmsCreateDate, edmsExpDate, edms_use, edmsExtraDate1, edmsExtraDate2, edmsExtraContent, edmsExtraNumber, edmsCreatorPosition)
	</insert> -->


	<insert id="createEdms" parameterType="EdmsVO">
	
		INSERT INTO EDMS (EDMS_NO, EDMS_FORM_NO, EDMS_CREATOR, EDMS_TITLE, EDMS_CONTENT, EDMS_STATUS)
					VALUES(NEXTVAL(EDMS_SEQ), #{edmsFromNo}, #{edmsCreator}, #{edmsTitle}, #{edmsContent}, #{edmsStatus})
	</insert>




<!-- 결재선 직원 불러오기  -->

	<select id="getMemberList" resultType="Map">
		
		SELECT MEMBER_ID, USERNAME, DEPARTMENT_ID, DEPARTMENT_SUPER_ID , DEPARTMENT_NAME , POSITION_ID, POSITION_NAME FROM `MEMBER` m 
			JOIN DEPARTMENT d 
			USING (DEPARTMENT_ID)
			JOIN POSITIONRANK p 
			USING (POSITION_ID);
					
	
	</select>


<!-- 부서정보 가져오기  -->

	<select id="getDeptChart" resultMap="deptList">
	
	<!-- 
		WITH RECURSIVE CTE AS (
		    SELECT 
		        DEPARTMENT_ID, 
		        DEPARTMENT_NAME, 
		        DEPARTMENT_SUPER_ID, 
		        0 AS depth,
		        CAST(DEPARTMENT_ID AS CHAR(200)) AS path
		    FROM 
		        DEPARTMENT
		    WHERE 
		        DEPARTMENT_SUPER_ID = 0
		
		    UNION ALL
		
		    SELECT 
		        d.DEPARTMENT_ID, 
		        d.DEPARTMENT_NAME, 
		        d.DEPARTMENT_SUPER_ID, 
		        depth + 1, 
		        CONCAT(CTE.path, ',', d.DEPARTMENT_ID)
		    FROM 
		        DEPARTMENT d
		    INNER JOIN 
		        CTE ON d.DEPARTMENT_SUPER_ID = CTE.DEPARTMENT_ID
		)
		SELECT 
		    CTE.*,
		    JSON_ARRAYAGG(child.DEPARTMENT_ID) AS department_child
		FROM 
		    CTE
		LEFT JOIN 
		    DEPARTMENT AS child ON CTE.DEPARTMENT_ID = child.DEPARTMENT_SUPER_ID
		GROUP BY 
		    CTE.DEPARTMENT_ID;
	 -->
	 WITH RECURSIVE CTE AS (
		    SELECT 
		        DEPARTMENT_ID, 
		        DEPARTMENT_NAME, 
		        DEPARTMENT_SUPER_ID, 
		        0 AS depth,
		        CAST(DEPARTMENT_ID AS CHAR(200)) AS path
		    FROM 
		        DEPARTMENT
		    WHERE 
		        DEPARTMENT_SUPER_ID = 0
		
		    UNION ALL
		
		    SELECT 
		        d.DEPARTMENT_ID, 
		        d.DEPARTMENT_NAME, 
		        d.DEPARTMENT_SUPER_ID, 
		        depth + 1, 
		        CONCAT(CTE.path, ',', d.DEPARTMENT_ID)
		    FROM 
		        DEPARTMENT d
		    INNER JOIN 
		        CTE ON d.DEPARTMENT_SUPER_ID = CTE.DEPARTMENT_ID
		)
		SELECT *		   
		FROM 
		    CTE
	 
	 
	</select>
	<select id="getMemberChart" resultMap="memberList">
		SELECT MEMBER_ID+1000 id, USERNAME, DEPARTMENT_ID, POSITION_NAME FROM `MEMBER` m 
			JOIN DEPARTMENT d 
			USING (DEPARTMENT_ID)
			JOIN POSITIONRANK p 
			USING (POSITION_ID)
	
	</select>
	
	<resultMap type="Map" id="memberList">
		<id column="id" property="id" javaType="String"/> 
		<result column="USERNAME" property="text"  javaType="String"/>
		<result column="DEPARTMENT_ID" property="parent"  javaType="String"/>		
	
	</resultMap>

	<resultMap type="Map" id="deptList">
		<id column="DEPARTMENT_ID" property="id" javaType="String"/>
		<result column="DEPARTMENT_NAME" property="text"  javaType="String"/>
		<result column="DEPARTMENT_SUPER_ID" property="parent"  javaType="String"/>		
	</resultMap>
	
</mapper>


